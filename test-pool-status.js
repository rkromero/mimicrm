#!/usr/bin/env node

/**
 * Script para probar el estado del pool de conexiones MySQL
 * Uso: node test-pool-status.js
 */

const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('üß™ Test del Pool de Conexiones MySQL');
console.log('=====================================\n');

// Funci√≥n para hacer petici√≥n al endpoint
async function testPoolStatus(token) {
    try {
        const fetch = require('node-fetch');
        const response = await fetch('http://localhost:3000/api/pool-status', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        console.log('‚úÖ Respuesta del servidor:');
        console.log('========================');
        console.log(JSON.stringify(data, null, 2));
        
        // An√°lisis del estado
        console.log('\nüìä An√°lisis del Pool:');
        console.log('=====================');
        
        if (data.status === 'ok' && data.pool) {
            const { pool } = data;
            console.log(`üîó Conexiones totales: ${pool.totalConnections}`);
            console.log(`üü¢ Conexiones libres: ${pool.freeConnections}`);
            console.log(`üî¥ Conexiones en uso: ${pool.usedConnections}`);
            console.log(`üìà Utilizaci√≥n: ${pool.utilizationPercent}%`);
            console.log(`‚ù§Ô∏è  Estado de salud: ${data.health.toUpperCase()}`);
            
            // Recomendaciones
            if (pool.utilizationPercent > 80) {
                console.log('\n‚ö†Ô∏è  ADVERTENCIA: Pool cerca del l√≠mite');
                console.log('üí° Considera aumentar connectionLimit si es frecuente');
            } else if (pool.utilizationPercent < 20) {
                console.log('\n‚úÖ Pool funcionando con baja utilizaci√≥n (√≥ptimo)');
            } else {
                console.log('\nüëç Pool funcionando en rango normal');
            }
        } else {
            console.log('‚ùå Error en la respuesta del servidor');
        }

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        
        if (error.message.includes('ECONNREFUSED')) {
            console.log('\nüí° Posibles soluciones:');
            console.log('   1. Verifica que el servidor est√© ejecut√°ndose en puerto 3000');
            console.log('   2. Ejecuta: npm start');
        } else if (error.message.includes('401') || error.message.includes('403')) {
            console.log('\nüí° Error de autenticaci√≥n:');
            console.log('   1. El token puede estar expirado');
            console.log('   2. Inicia sesi√≥n nuevamente en el CRM');
        }
    }
}

// Funci√≥n para obtener el token desde localStorage (simulado)
function getStoredToken() {
    console.log('üìù Para probar el endpoint necesitas un token de autenticaci√≥n.');
    console.log('üåê Opci√≥n 1: Abre http://localhost:3000 en tu navegador');
    console.log('üîç Opci√≥n 2: Abre las herramientas de desarrollo (F12)');
    console.log('üíæ Opci√≥n 3: En la consola ejecuta: localStorage.getItem("authToken")');
    console.log('üìã Opci√≥n 4: Copia el token y p√©galo aqu√≠\n');
}

async function main() {
    try {
        // Opci√≥n simple: intentar sin token primero (para ver si hay otros errores)
        console.log('üîÑ Intentando conectar al servidor...\n');
        
        await testPoolStatus(''); // Sin token para ver qu√© pasa
        
    } catch (error) {
        console.log('üîê Se requiere autenticaci√≥n. Vamos a pedirte el token.\n');
        
        getStoredToken();
        
        rl.question('Pega tu token aqu√≠ (o presiona Enter para cancelar): ', async (token) => {
            if (!token.trim()) {
                console.log('‚ùå Cancelado. Para probar manualmente:');
                console.log('   curl -H "Authorization: Bearer TU_TOKEN" http://localhost:3000/api/pool-status');
                rl.close();
                return;
            }

            await testPoolStatus(token.trim());
            rl.close();
        });
    }
}

// Verificar si node-fetch est√° disponible
try {
    require('node-fetch');
} catch (error) {
    console.error('‚ùå node-fetch no est√° instalado.');
    console.log('üí° Para instalar: npm install node-fetch@2.7.0');
    console.log('üåê Alternativamente, prueba en el navegador:');
    console.log('   1. Abre http://localhost:3000');
    console.log('   2. Inicia sesi√≥n');
    console.log('   3. Ve a http://localhost:3000/api/pool-status');
    process.exit(1);
}

if (require.main === module) {
    main();
}